class Solution:
  """
  @param board: a 2D integer array
  @return: the current board
  """

  def candyCrush(self, board):
    # Write your code here
    try:
      nr, nc = len(board), len(board[0])
    except Exception:
      return board
    while True:
      chang = False
      for ir in range(nr):
        ic = 0
        while (ic < nc - 2):
          jc = ic + 1
          while (jc < nc and abs(board[ir][jc]) == abs(board[ir][ic])):
            jc += 1
          if (jc - ic) >= 3:
            if board[ir][ic] != 0:
              for kc in range(ic, jc):
                board[ir][kc] = -abs(board[ir][kc])
              chang = True
          ic = jc
      for ic in range(nc):
        ir = 0
        while (ir < nr - 2):
          jr = ir + 1
          while (jr < nr and abs(board[jr][ic]) == abs(board[ir][ic])):
            jr += 1
          if (jr - ir) >= 3:
            if board[ir][ic] != 0:
              for kr in range(ir, jr):
                board[kr][ic] = -abs(board[kr][ic])
              chang = True
          ir = jr
      if not chang:
        return board
      for j in range(nc):
        storeInd = nr - 1
        for i in range(nr - 1, -1, -1):
          if board[i][j] > 0:
            board[storeInd][j] = board[i][j]
            storeInd -= 1
        for k in range(storeInd, -1, -1):
          board[k][j] = 0


print(
    Solution().candyCrush(
        [[
            3, 2, 1, 1, 2, 5, 3, 4, 3, 3, 2, 4, 1, 5, 3, 5, 4, 1, 1, 4, 4, 4, 1,
            2, 3, 3, 3, 2, 3, 3, 1, 2, 2, 5, 4, 2, 2, 4, 1, 1, 5, 2, 4, 4, 1, 3,
            5, 5, 3, 1
        ],
         [
             3, 4, 1, 1, 5, 3, 5, 5, 2, 3, 1, 4, 1, 2, 3, 2, 5, 4, 4, 3, 4, 5,
             5, 1, 5, 3, 5, 1, 3, 2, 3, 2, 3, 2, 2, 1, 2, 5, 5, 2, 4, 1, 5, 3,
             3, 5, 4, 3, 2, 2
         ],
         [
             1, 5, 1, 1, 1, 2, 3, 2, 3, 5, 5, 4, 4, 3, 4, 1, 5, 5, 1, 2, 4, 4,
             1, 4, 5, 2, 4, 1, 3, 3, 2, 3, 2, 3, 2, 2, 3, 5, 3, 2, 2, 4, 3, 2,
             1, 2, 1, 4, 4, 5
         ],
         [
             1, 4, 4, 5, 3, 1, 1, 5, 1, 3, 2, 4, 2, 1, 4, 5, 1, 5, 3, 5, 5, 4,
             1, 5, 1, 1, 4, 5, 5, 1, 2, 4, 1, 2, 2, 4, 2, 3, 4, 4, 4, 2, 3, 5,
             1, 3, 3, 5, 3, 4
         ],
         [
             5, 4, 5, 2, 2, 4, 5, 1, 2, 2, 3, 1, 3, 1, 1, 2, 3, 1, 3, 5, 3, 5,
             5, 5, 3, 1, 5, 4, 4, 5, 3, 1, 4, 5, 3, 2, 1, 5, 1, 2, 3, 3, 5, 3,
             3, 2, 4, 3, 3, 2
         ],
         [
             5, 4, 5, 3, 3, 3, 4, 5, 5, 5, 2, 2, 2, 1, 3, 5, 4, 2, 3, 5, 3, 4,
             4, 2, 3, 1, 5, 2, 2, 3, 2, 4, 5, 4, 1, 2, 1, 4, 1, 1, 5, 4, 1, 4,
             2, 4, 5, 1, 2, 4
         ],
         [
             2, 4, 3, 2, 5, 3, 4, 4, 4, 3, 3, 1, 4, 2, 3, 5, 5, 1, 3, 2, 1, 3,
             4, 5, 3, 1, 3, 2, 3, 1, 5, 3, 2, 1, 3, 1, 4, 4, 5, 3, 1, 3, 5, 3,
             1, 2, 3, 4, 5, 5
         ],
         [
             2, 4, 3, 3, 4, 3, 1, 3, 1, 1, 5, 4, 3, 1, 3, 4, 2, 5, 3, 1, 5, 2,
             2, 1, 2, 2, 1, 1, 2, 2, 2, 2, 5, 3, 5, 3, 5, 5, 4, 4, 5, 1, 3, 2,
             5, 5, 4, 4, 5, 4
         ],
         [
             3, 1, 4, 2, 3, 2, 3, 1, 5, 3, 3, 2, 3, 1, 2, 2, 2, 4, 5, 5, 4, 2,
             4, 4, 5, 1, 4, 1, 4, 5, 5, 2, 3, 3, 1, 4, 2, 4, 2, 1, 2, 5, 2, 3,
             4, 3, 5, 5, 4, 1
         ],
         [
             2, 3, 5, 2, 1, 1, 1, 5, 3, 5, 3, 1, 3, 5, 4, 4, 4, 5, 3, 2, 4, 3,
             2, 4, 1, 4, 2, 5, 3, 1, 3, 5, 5, 3, 1, 4, 3, 3, 4, 2, 3, 2, 5, 4,
             1, 4, 1, 3, 4, 2
         ],
         [
             3, 5, 3, 4, 2, 4, 2, 4, 1, 4, 4, 3, 2, 3, 3, 5, 4, 3, 3, 3, 5, 1,
             4, 5, 4, 2, 5, 1, 3, 1, 3, 1, 4, 5, 2, 2, 2, 5, 3, 5, 1, 1, 1, 3,
             3, 1, 1, 1, 3, 2
         ],
         [
             5, 1, 4, 4, 5, 1, 4, 3, 5, 1, 5, 5, 1, 5, 1, 3, 2, 4, 2, 2, 1, 5,
             3, 2, 5, 3, 3, 5, 5, 1, 5, 4, 1, 3, 5, 4, 3, 5, 4, 4, 1, 1, 4, 3,
             2, 1, 5, 4, 3, 2
         ],
         [
             2, 4, 3, 4, 2, 3, 1, 4, 4, 4, 1, 5, 2, 5, 2, 3, 4, 2, 2, 2, 2, 3,
             4, 3, 1, 2, 4, 1, 2, 2, 3, 3, 2, 2, 3, 4, 5, 1, 3, 1, 3, 2, 5, 4,
             2, 2, 3, 1, 1, 5
         ],
         [
             3, 3, 2, 4, 1, 2, 1, 2, 4, 4, 5, 5, 2, 3, 5, 2, 2, 1, 4, 2, 3, 1,
             4, 3, 1, 4, 1, 3, 3, 1, 4, 2, 1, 5, 1, 5, 3, 4, 4, 4, 5, 2, 3, 4,
             4, 4, 4, 5, 2, 4
         ],
         [
             3, 5, 1, 1, 2, 2, 4, 5, 3, 5, 1, 1, 5, 3, 1, 2, 3, 3, 4, 2, 5, 1,
             3, 1, 5, 2, 1, 4, 5, 2, 4, 5, 1, 4, 2, 4, 1, 3, 1, 3, 1, 3, 4, 5,
             2, 5, 5, 4, 2, 2
         ],
         [
             5, 3, 5, 2, 4, 1, 3, 1, 4, 5, 3, 2, 5, 4, 3, 2, 1, 4, 1, 2, 5, 4,
             2, 1, 4, 3, 5, 3, 1, 2, 3, 4, 3, 2, 5, 1, 1, 3, 4, 5, 4, 1, 4, 5,
             4, 1, 3, 2, 4, 5
         ],
         [
             4, 1, 4, 4, 4, 4, 3, 1, 3, 3, 1, 4, 1, 1, 3, 4, 1, 1, 5, 2, 3, 3,
             5, 3, 3, 1, 3, 1, 5, 4, 3, 2, 1, 5, 4, 1, 4, 3, 4, 4, 5, 2, 1, 5,
             1, 4, 1, 4, 1, 3
         ],
         [
             2, 1, 1, 5, 5, 3, 3, 4, 3, 4, 3, 3, 3, 3, 3, 4, 1, 1, 1, 4, 4, 1,
             3, 4, 2, 4, 2, 4, 5, 3, 5, 3, 2, 4, 5, 2, 2, 1, 3, 1, 2, 3, 3, 4,
             4, 1, 1, 2, 5, 5
         ],
         [
             2, 3, 5, 3, 3, 3, 1, 3, 1, 4, 4, 3, 5, 1, 2, 5, 5, 4, 2, 3, 4, 4,
             3, 5, 2, 2, 3, 4, 3, 4, 3, 5, 1, 1, 4, 4, 3, 4, 3, 2, 2, 2, 3, 4,
             2, 4, 1, 4, 5, 1
         ],
         [
             3, 5, 3, 4, 2, 2, 4, 3, 1, 1, 3, 2, 2, 1, 2, 3, 5, 3, 1, 2, 1, 1,
             1, 5, 2, 3, 3, 2, 2, 1, 1, 4, 4, 3, 1, 2, 5, 1, 4, 1, 1, 4, 1, 3,
             5, 4, 2, 2, 1, 5
         ],
         [
             5, 3, 3, 1, 1, 3, 2, 4, 1, 2, 1, 1, 3, 3, 5, 2, 4, 2, 3, 3, 1, 1,
             3, 3, 4, 2, 5, 4, 3, 5, 1, 3, 3, 2, 2, 5, 3, 4, 1, 4, 4, 1, 2, 2,
             4, 4, 5, 2, 4, 3
         ],
         [
             5, 1, 2, 1, 4, 5, 4, 1, 5, 2, 2, 1, 5, 4, 4, 5, 3, 3, 2, 3, 2, 4,
             1, 5, 2, 3, 4, 3, 4, 3, 3, 3, 2, 4, 1, 1, 3, 3, 5, 2, 1, 2, 4, 1,
             2, 4, 3, 5, 3, 3
         ],
         [
             5, 5, 2, 3, 2, 3, 4, 1, 1, 4, 2, 3, 3, 1, 3, 5, 1, 4, 1, 5, 2, 3,
             3, 5, 2, 4, 5, 5, 2, 3, 1, 5, 1, 5, 4, 2, 3, 4, 1, 2, 4, 1, 3, 3,
             2, 4, 1, 4, 4, 5
         ],
         [
             3, 3, 3, 4, 2, 2, 5, 5, 1, 4, 5, 2, 1, 2, 4, 3, 1, 2, 1, 3, 5, 3,
             3, 1, 4, 5, 4, 1, 3, 4, 3, 4, 3, 3, 3, 5, 3, 3, 5, 2, 2, 2, 4, 4,
             3, 3, 3, 1, 2, 2
         ],
         [
             4, 2, 3, 5, 4, 4, 3, 4, 5, 2, 4, 3, 3, 5, 5, 5, 5, 4, 2, 1, 2, 3,
             2, 1, 3, 3, 5, 4, 1, 2, 3, 3, 3, 5, 1, 3, 4, 4, 3, 4, 1, 3, 2, 3,
             5, 1, 1, 2, 3, 4
         ],
         [
             1, 1, 5, 2, 2, 3, 4, 5, 1, 2, 5, 2, 4, 2, 1, 3, 4, 3, 2, 5, 3, 3,
             1, 4, 5, 5, 2, 4, 4, 2, 1, 1, 2, 2, 3, 2, 1, 5, 5, 3, 4, 5, 5, 1,
             3, 1, 5, 4, 5, 3
         ],
         [
             1, 2, 2, 5, 4, 3, 2, 5, 1, 2, 4, 4, 5, 5, 1, 4, 4, 1, 5, 1, 5, 2,
             1, 1, 2, 2, 2, 5, 5, 4, 1, 5, 4, 5, 3, 5, 2, 1, 4, 2, 5, 1, 5, 3,
             1, 1, 1, 5, 3, 3
         ],
         [
             5, 3, 1, 4, 5, 3, 1, 4, 5, 2, 5, 1, 4, 4, 1, 3, 5, 3, 3, 1, 5, 5,
             1, 5, 4, 3, 4, 1, 1, 5, 4, 1, 1, 1, 1, 4, 4, 5, 4, 2, 1, 2, 1, 2,
             5, 5, 5, 5, 3, 4
         ],
         [
             2, 4, 2, 2, 3, 2, 5, 3, 2, 1, 2, 1, 4, 2, 3, 3, 3, 3, 2, 1, 4, 1,
             5, 2, 4, 1, 1, 4, 2, 1, 4, 1, 5, 5, 5, 5, 3, 4, 3, 2, 4, 5, 1, 5,
             2, 5, 1, 3, 1, 4
         ],
         [
             3, 2, 5, 4, 2, 3, 1, 3, 5, 4, 2, 2, 3, 5, 4, 2, 1, 2, 2, 3, 3, 1,
             4, 4, 2, 3, 4, 1, 1, 2, 3, 1, 4, 2, 3, 2, 3, 2, 5, 3, 4, 2, 4, 3,
             4, 2, 5, 3, 2, 3
         ],
         [
             3, 2, 4, 2, 2, 4, 1, 5, 2, 3, 4, 3, 5, 4, 5, 5, 4, 5, 1, 5, 1, 3,
             4, 4, 2, 5, 4, 3, 5, 5, 1, 4, 2, 2, 2, 2, 4, 3, 5, 1, 3, 2, 3, 1,
             4, 3, 4, 4, 1, 4
         ],
         [
             1, 3, 3, 4, 4, 1, 5, 2, 1, 1, 3, 5, 1, 5, 5, 1, 1, 3, 3, 4, 2, 1,
             4, 1, 1, 3, 3, 3, 1, 3, 4, 5, 1, 2, 3, 4, 5, 4, 1, 3, 5, 4, 2, 5,
             5, 3, 3, 4, 2, 5
         ],
         [
             4, 2, 3, 2, 5, 1, 1, 2, 2, 2, 1, 2, 4, 5, 5, 1, 2, 3, 1, 2, 2, 5,
             2, 3, 4, 3, 5, 1, 5, 4, 3, 5, 5, 3, 2, 5, 5, 5, 3, 5, 5, 5, 3, 3,
             2, 4, 1, 5, 1, 1
         ],
         [
             5, 5, 3, 5, 5, 2, 3, 5, 3, 2, 2, 3, 1, 5, 2, 4, 4, 3, 3, 3, 4, 1,
             4, 3, 2, 3, 5, 2, 1, 3, 2, 2, 2, 2, 2, 4, 2, 3, 3, 5, 4, 1, 5, 3,
             4, 2, 2, 3, 2, 1
         ],
         [
             5, 2, 2, 3, 4, 1, 5, 5, 5, 3, 4, 1, 1, 2, 3, 5, 4, 4, 5, 2, 4, 4,
             5, 5, 1, 5, 5, 4, 1, 5, 2, 1, 1, 1, 2, 4, 3, 4, 2, 4, 1, 4, 2, 1,
             1, 1, 4, 5, 2, 3
         ],
         [
             3, 4, 2, 2, 1, 1, 3, 2, 3, 2, 4, 1, 2, 1, 2, 5, 4, 3, 5, 1, 3, 1,
             3, 3, 3, 5, 3, 5, 3, 3, 1, 2, 4, 2, 3, 4, 3, 1, 4, 3, 5, 2, 4, 5,
             2, 2, 2, 2, 2, 5
         ],
         [
             1, 4, 4, 1, 2, 5, 2, 1, 3, 3, 3, 4, 1, 2, 2, 4, 2, 5, 5, 3, 5, 5,
             2, 2, 5, 5, 2, 5, 2, 2, 2, 5, 1, 1, 5, 5, 1, 5, 5, 1, 3, 2, 5, 3,
             4, 3, 4, 3, 4, 2
         ],
         [
             3, 1, 3, 3, 1, 5, 1, 3, 3, 5, 1, 4, 5, 2, 1, 3, 5, 5, 4, 1, 4, 2,
             2, 5, 5, 4, 2, 5, 1, 1, 4, 1, 1, 5, 5, 3, 2, 4, 4, 5, 3, 2, 4, 3,
             2, 1, 3, 3, 2, 3
         ],
         [
             3, 4, 5, 5, 5, 5, 2, 4, 3, 3, 3, 2, 5, 1, 3, 3, 3, 1, 1, 2, 2, 1,
             2, 2, 2, 4, 4, 1, 4, 3, 2, 2, 1, 5, 5, 5, 3, 2, 3, 5, 3, 1, 5, 4,
             3, 5, 2, 4, 5, 5
         ],
         [
             2, 1, 4, 5, 1, 2, 2, 3, 3, 4, 1, 4, 3, 4, 4, 2, 2, 3, 4, 1, 4, 2,
             3, 4, 3, 1, 2, 5, 3, 1, 3, 1, 4, 3, 2, 4, 5, 3, 4, 3, 4, 3, 5, 4,
             4, 3, 2, 4, 4, 5
         ],
         [
             5, 3, 4, 1, 3, 4, 4, 3, 3, 5, 2, 5, 4, 3, 3, 2, 1, 5, 2, 4, 3, 3,
             1, 4, 4, 5, 1, 4, 3, 5, 3, 3, 3, 4, 5, 2, 1, 1, 4, 4, 3, 2, 4, 1,
             3, 3, 3, 4, 5, 5
         ],
         [
             5, 2, 4, 3, 3, 4, 3, 4, 4, 1, 1, 4, 2, 2, 3, 4, 5, 4, 1, 4, 2, 3,
             2, 1, 2, 5, 5, 5, 4, 3, 5, 2, 4, 2, 4, 2, 5, 5, 2, 1, 1, 5, 5, 5,
             1, 5, 2, 2, 5, 1
         ],
         [
             3, 5, 2, 1, 1, 4, 5, 1, 5, 3, 2, 3, 1, 1, 1, 2, 3, 1, 5, 5, 5, 1,
             4, 5, 5, 5, 1, 1, 3, 2, 4, 1, 5, 5, 2, 2, 3, 1, 5, 3, 3, 5, 1, 4,
             2, 4, 5, 2, 3, 3
         ],
         [
             4, 4, 4, 5, 3, 2, 5, 1, 4, 1, 2, 1, 3, 5, 1, 5, 3, 4, 5, 2, 1, 5,
             1, 3, 5, 2, 4, 1, 3, 4, 4, 2, 4, 3, 3, 3, 4, 3, 1, 1, 2, 4, 1, 1,
             5, 2, 3, 1, 2, 1
         ],
         [
             3, 3, 1, 2, 1, 3, 2, 1, 5, 4, 3, 1, 1, 5, 1, 5, 4, 4, 2, 1, 2, 4,
             2, 4, 2, 2, 4, 2, 3, 4, 4, 4, 1, 5, 2, 1, 5, 3, 1, 5, 2, 3, 5, 3,
             1, 3, 2, 1, 4, 5
         ],
         [
             1, 3, 3, 2, 4, 2, 5, 2, 5, 1, 2, 3, 2, 2, 2, 3, 4, 3, 2, 1, 2, 3,
             2, 1, 5, 1, 3, 5, 1, 3, 5, 5, 4, 5, 4, 1, 1, 4, 2, 3, 4, 4, 4, 1,
             1, 1, 2, 3, 3, 4
         ],
         [
             1, 3, 4, 5, 3, 1, 3, 1, 5, 1, 3, 2, 1, 1, 4, 5, 4, 2, 4, 2, 3, 1,
             5, 1, 2, 1, 4, 1, 3, 1, 5, 2, 3, 4, 3, 5, 1, 5, 5, 2, 4, 1, 3, 1,
             5, 3, 1, 5, 3, 5
         ],
         [
             5, 1, 2, 3, 2, 1, 5, 2, 1, 1, 2, 2, 3, 2, 2, 4, 1, 1, 2, 5, 3, 2,
             2, 2, 3, 2, 5, 4, 2, 5, 5, 1, 2, 1, 1, 3, 2, 2, 3, 3, 2, 2, 4, 5,
             1, 4, 1, 3, 5, 1
         ],
         [
             1, 5, 5, 2, 4, 1, 3, 5, 1, 4, 3, 4, 5, 5, 3, 2, 1, 1, 2, 3, 2, 4,
             5, 5, 3, 2, 5, 5, 4, 2, 1, 5, 3, 3, 2, 2, 5, 4, 4, 2, 1, 2, 1, 2,
             1, 3, 5, 2, 1, 1
         ],
         [
             5, 5, 5, 5, 2, 5, 2, 2, 4, 1, 1, 4, 1, 2, 1, 2, 4, 4, 1, 3, 2, 1,
             3, 1, 3, 4, 1, 4, 4, 2, 2, 4, 5, 5, 4, 4, 2, 4, 2, 2, 5, 5, 4, 1,
             5, 2, 4, 1, 5, 3
         ]]))
# !Wrong logic
# def candyCrush(self, board):
#   # Write your code here
#   def crush(ir, ic, cnt, chang):
#     if (ir < 0 or ir >= nr or ic < 0 or ic >= nc or board[ir][ic] != v or
#         visited[ir][ic]):
#       return cnt
#     cnt += 1
#     visited[ir][ic] = True
#     cnt = max(cnt, crush(ir, ic - 1, cnt, chang))
#     cnt = max(cnt, crush(ir - 1, ic, cnt, chang))
#     cnt = max(cnt, crush(ir, ic + 1, cnt, chang))
#     cnt = max(cnt, crush(ir + 1, ic, cnt, chang))
#     if cnt > 2:
#       board[ir][ic] = 0
#       chang[0] = True
#     return cnt

#   nr = len(board)
#   if nr == 0:
#     return board
#   nc = len(board[0])
#   if nc == 0:
#     return board
#   visited = [[False] * nc for _ in range(nr)]
#   while (True):
#     chang = [False]
#     for ir in range(nr):
#       for ic in range(nc):
#         v = board[ir][ic]
#         if v != 0:
#           crush(ir, ic, 0, chang)
#     print(board)
#     if not chang[0]:
#       break
#   for ic in range(nc):
#     newc = list(filter(lambda x: x != 0, [board[ir][ic] for ir in range(nr)]))
#     newcl = len(newc)
#     for ir in range(nr - newcl):
#       board[ir][ic] = 0
#     for ir in range(nr - newcl, nr):
#       board[ir][ic] = newc[nr - newcl - ir]
#   return board
